version: '3'

services:
    db:
        container_name: mysqldb
        image: mysql
        env_file:
        - .env_mysql/.mysql.env
        volumes:
            - ./sql-data/db:/var/lib/mysql
        ports: 
            - "3307:3306"
    api:
         depends_on: 
             - db 
         container_name: backendapi
         restart: always
         build:
             context: .
             dockerfile: Dockerfile
         command: bash -c 'while !</dev/tcp/db/3306; do sleep 1; done; npm run dev'
         ports:
             - "3001:3000"
         env_file:
         - ./api/.env
         volumes:
             - ./:/app
    mosquitto:
        image: eclipse-mosquitto
        container_name: mosquittobroker
        ports:
            - '1883:1883'
        #network_mode: host
        command: >
            bash -c "kill $(lsof -t -i:1883) || true && /usr/sbin/mosquitto -c /mosquitto/config/mosquitto.conf"
        volumes:
        - './mqtt/etc/mosquitto.conf:/mosquitto/config/mosquitto.conf'
        - './mqtt/etc/mqttusers:/mosquitto/config/mqttusers'
        - './mqtt/data:/mosquitto/data'
        - './mqtt/log:/mosquitto/log'
        restart: unless-stopped
    
    # Definir el servicio de la aplicación Ionic
    frontend-app:
        # Utilizar la imagen construida a partir del archivo Dockerfile
        # build: .
        container_name: frontend-app
        build:
             context: .
             dockerfile: Dockerfile-frontend
        # Mapear el puerto 80 del contenedor al puerto 8080 del host
        ports:
        - "8080:80"

  # Definir el servicio de Nginx
    nginx:
    # Utilizar la imagen oficial de Nginx
        image: nginx
    # Copiar la configuración de Nginx al contenedor
        volumes:
        - ./nginx.conf:/etc/nginx/conf.d/default.conf
    # Enlazar el servicio de Nginx con el servicio de la aplicación Ionic
        depends_on:
        - frontend-app
    # Mapear el puerto 80 del contenedor al puerto 80 del host
        ports:
        - "80:80"

